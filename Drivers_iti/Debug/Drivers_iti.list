
Drivers_iti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c20  08000c28  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c28  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000c28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000c28  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b0f  00000000  00000000  00010c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000744  00000000  00000000  00012767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  00012eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  000130c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000145f  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b4e  00000000  00000000  000146b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000581a  00000000  00000000  00015205  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001aa1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000064c  00000000  00000000  0001aa9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c08 	.word	0x08000c08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c08 	.word	0x08000c08

080001d4 <MCAL_EXTI_Enable>:
	â€¢ Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
	external interrupt controller (EXTI) so that an interrupt coming from one of the 23 lines
	can be correctly acknowledged.
 */
ReturnStatus MCAL_EXTI_Enable(EXTI_Config_t  *Configuration)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	SET_BIT(EXTI->EXTI_IMR,Configuration->EXTI_LineSelection);
 80001dc:	4b5f      	ldr	r3, [pc, #380]	; (800035c <MCAL_EXTI_Enable+0x188>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	7812      	ldrb	r2, [r2, #0]
 80001e4:	4611      	mov	r1, r2
 80001e6:	2201      	movs	r2, #1
 80001e8:	408a      	lsls	r2, r1
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a5b      	ldr	r2, [pc, #364]	; (800035c <MCAL_EXTI_Enable+0x188>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
	if(Configuration->EXTI_EdgeSelection==EXTI_RISING_EDGE)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d10b      	bne.n	8000212 <MCAL_EXTI_Enable+0x3e>
	{
		SET_BIT(EXTI->EXTI_RTSR,Configuration->EXTI_LineSelection);
 80001fa:	4b58      	ldr	r3, [pc, #352]	; (800035c <MCAL_EXTI_Enable+0x188>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	7812      	ldrb	r2, [r2, #0]
 8000202:	4611      	mov	r1, r2
 8000204:	2201      	movs	r2, #1
 8000206:	408a      	lsls	r2, r1
 8000208:	4611      	mov	r1, r2
 800020a:	4a54      	ldr	r2, [pc, #336]	; (800035c <MCAL_EXTI_Enable+0x188>)
 800020c:	430b      	orrs	r3, r1
 800020e:	6093      	str	r3, [r2, #8]
 8000210:	e029      	b.n	8000266 <MCAL_EXTI_Enable+0x92>
	}
	else if(Configuration->EXTI_EdgeSelection==EXTI_FALLING_EDGE)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789b      	ldrb	r3, [r3, #2]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d10b      	bne.n	8000232 <MCAL_EXTI_Enable+0x5e>
	{
		SET_BIT(EXTI->EXTI_FTSR,Configuration->EXTI_LineSelection);
 800021a:	4b50      	ldr	r3, [pc, #320]	; (800035c <MCAL_EXTI_Enable+0x188>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	7812      	ldrb	r2, [r2, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	2201      	movs	r2, #1
 8000226:	408a      	lsls	r2, r1
 8000228:	4611      	mov	r1, r2
 800022a:	4a4c      	ldr	r2, [pc, #304]	; (800035c <MCAL_EXTI_Enable+0x188>)
 800022c:	430b      	orrs	r3, r1
 800022e:	60d3      	str	r3, [r2, #12]
 8000230:	e019      	b.n	8000266 <MCAL_EXTI_Enable+0x92>
	}
	else if(Configuration->EXTI_EdgeSelection==EXTI_ON_CHANGE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	789b      	ldrb	r3, [r3, #2]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d115      	bne.n	8000266 <MCAL_EXTI_Enable+0x92>
	{
		SET_BIT(EXTI->EXTI_RTSR,Configuration->EXTI_LineSelection);
 800023a:	4b48      	ldr	r3, [pc, #288]	; (800035c <MCAL_EXTI_Enable+0x188>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7812      	ldrb	r2, [r2, #0]
 8000242:	4611      	mov	r1, r2
 8000244:	2201      	movs	r2, #1
 8000246:	408a      	lsls	r2, r1
 8000248:	4611      	mov	r1, r2
 800024a:	4a44      	ldr	r2, [pc, #272]	; (800035c <MCAL_EXTI_Enable+0x188>)
 800024c:	430b      	orrs	r3, r1
 800024e:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->EXTI_FTSR,Configuration->EXTI_LineSelection);
 8000250:	4b42      	ldr	r3, [pc, #264]	; (800035c <MCAL_EXTI_Enable+0x188>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	7812      	ldrb	r2, [r2, #0]
 8000258:	4611      	mov	r1, r2
 800025a:	2201      	movs	r2, #1
 800025c:	408a      	lsls	r2, r1
 800025e:	4611      	mov	r1, r2
 8000260:	4a3e      	ldr	r2, [pc, #248]	; (800035c <MCAL_EXTI_Enable+0x188>)
 8000262:	430b      	orrs	r3, r1
 8000264:	60d3      	str	r3, [r2, #12]
	}
	switch(Configuration->EXTI_LineSelection)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b0f      	cmp	r3, #15
 800026c:	d866      	bhi.n	800033c <MCAL_EXTI_Enable+0x168>
 800026e:	a201      	add	r2, pc, #4	; (adr r2, 8000274 <MCAL_EXTI_Enable+0xa0>)
 8000270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000274:	080002b5 	.word	0x080002b5
 8000278:	080002b5 	.word	0x080002b5
 800027c:	080002b5 	.word	0x080002b5
 8000280:	080002b5 	.word	0x080002b5
 8000284:	080002d7 	.word	0x080002d7
 8000288:	080002d7 	.word	0x080002d7
 800028c:	080002d7 	.word	0x080002d7
 8000290:	080002d7 	.word	0x080002d7
 8000294:	080002f9 	.word	0x080002f9
 8000298:	080002f9 	.word	0x080002f9
 800029c:	080002f9 	.word	0x080002f9
 80002a0:	080002f9 	.word	0x080002f9
 80002a4:	0800031b 	.word	0x0800031b
 80002a8:	0800031b 	.word	0x0800031b
 80002ac:	0800031b 	.word	0x0800031b
 80002b0:	0800031b 	.word	0x0800031b
	{
	case 0:
	case 1:
	case 2:
	case 3:		SYSCFG_EXTI0_3(Configuration->EXTI_PortSelection,(Configuration->EXTI_LineSelection % 4)); break;
 80002b4:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	7852      	ldrb	r2, [r2, #1]
 80002bc:	4611      	mov	r1, r2
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	7812      	ldrb	r2, [r2, #0]
 80002c2:	f002 0203 	and.w	r2, r2, #3
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6093      	str	r3, [r2, #8]
 80002d4:	e033      	b.n	800033e <MCAL_EXTI_Enable+0x16a>

	case 4:
	case 5:
	case 6:
	case 7:		SYSCFG_EXTI4_7(Configuration->EXTI_PortSelection,(Configuration->EXTI_LineSelection % 4)); break;
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	7852      	ldrb	r2, [r2, #1]
 80002de:	4611      	mov	r1, r2
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	7812      	ldrb	r2, [r2, #0]
 80002e4:	f002 0203 	and.w	r2, r2, #3
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	60d3      	str	r3, [r2, #12]
 80002f6:	e022      	b.n	800033e <MCAL_EXTI_Enable+0x16a>

	case 8:
	case 9:
	case 10:
	case 11:	SYSCFG_EXTI8_11(Configuration->EXTI_PortSelection,(Configuration->EXTI_LineSelection % 4)); break;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	7852      	ldrb	r2, [r2, #1]
 8000300:	4611      	mov	r1, r2
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	7812      	ldrb	r2, [r2, #0]
 8000306:	f002 0203 	and.w	r2, r2, #3
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	4611      	mov	r1, r2
 8000312:	4a13      	ldr	r2, [pc, #76]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 8000314:	430b      	orrs	r3, r1
 8000316:	6113      	str	r3, [r2, #16]
 8000318:	e011      	b.n	800033e <MCAL_EXTI_Enable+0x16a>

	case 12:
	case 13:
	case 14:
	case 15:	SYSCFG_EXTI12_15(Configuration->EXTI_PortSelection,(Configuration->EXTI_LineSelection % 4)); break;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7852      	ldrb	r2, [r2, #1]
 8000322:	4611      	mov	r1, r2
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	f002 0203 	and.w	r2, r2, #3
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <MCAL_EXTI_Enable+0x18c>)
 8000336:	430b      	orrs	r3, r1
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	e000      	b.n	800033e <MCAL_EXTI_Enable+0x16a>

	default:	        break;
 800033c:	bf00      	nop
	}
	ptr[Configuration->EXTI_LineSelection] = Configuration->CallBack;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	4619      	mov	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <MCAL_EXTI_Enable+0x190>)
 800034a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return STATUS_SUCCESS;
 800034e:	2300      	movs	r3, #0
}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40013c00 	.word	0x40013c00
 8000360:	40013800 	.word	0x40013800
 8000364:	2000001c 	.word	0x2000001c

08000368 <EXTI0_IRQHandler>:
	return STATUS_SUCCESS;

}

void EXTI0_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	SET_BIT(EXTI->EXTI_PR,0);
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI0_IRQHandler+0x1c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI0_IRQHandler+0x1c>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6153      	str	r3, [r2, #20]
	ptr[0]();
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <EXTI0_IRQHandler+0x20>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4798      	blx	r3
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40013c00 	.word	0x40013c00
 8000388:	2000001c 	.word	0x2000001c

0800038c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

	SET_BIT(EXTI->EXTI_PR,1);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI1_IRQHandler+0x1c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI1_IRQHandler+0x1c>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6153      	str	r3, [r2, #20]
	ptr[1]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI1_IRQHandler+0x20>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40013c00 	.word	0x40013c00
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <MCAL_GPIOx_Init>:
 * @param [out] 	: none
 * @retval 		: none
 * Note			: remember that according to our UQFN48 package we only have ports : A-B-C
 *===================================================================*/
void MCAL_GPIOx_Init(GPIOx_Registers_t *GPIOx,GPIOx_Config_t *Config)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
	if(Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN || Config->GPIO_PIN_MODE == GPIO_INPUT_FLOAT )
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d007      	beq.n	80003d2 <MCAL_GPIOx_Init+0x22>
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	785b      	ldrb	r3, [r3, #1]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d003      	beq.n	80003d2 <MCAL_GPIOx_Init+0x22>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	785b      	ldrb	r3, [r3, #1]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d154      	bne.n	800047c <MCAL_GPIOx_Init+0xcc>
	{
		GPIOx->GPIOx_MODER &= ~( 3<<( (Config->GPIO_PIN_NUMBER)<<1 ) );
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	2103      	movs	r1, #3
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	401a      	ands	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
		switch(Config->GPIO_PIN_MODE)
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d02a      	beq.n	8000448 <MCAL_GPIOx_Init+0x98>
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d002      	beq.n	80003fc <MCAL_GPIOx_Init+0x4c>
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d00d      	beq.n	8000416 <MCAL_GPIOx_Init+0x66>
		case GPIO_INPUT_PDWN :
			CLR_BIT(GPIOx->GPIOx_PUPDR,( (Config->GPIO_PIN_NUMBER)<<1) );
			SET_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );

		}
	}
 80003fa:	e1e8      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
			GPIOx->GPIOx_PUPDR &= ~( 3<< ( (Config->GPIO_PIN_NUMBER)<<1 ) );
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	0052      	lsls	r2, r2, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f202 	lsl.w	r2, r1, r2
 800040c:	43d2      	mvns	r2, r2
 800040e:	401a      	ands	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60da      	str	r2, [r3, #12]
			break ;
 8000414:	e031      	b.n	800047a <MCAL_GPIOx_Init+0xca>
			SET_BIT(GPIOx->GPIOx_PUPDR,(  (Config->GPIO_PIN_NUMBER) <<1 ) );
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	683a      	ldr	r2, [r7, #0]
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	0052      	lsls	r2, r2, #1
 8000420:	2101      	movs	r1, #1
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	431a      	orrs	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	60da      	str	r2, [r3, #12]
			CLR_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	0052      	lsls	r2, r2, #1
 8000436:	3201      	adds	r2, #1
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	43d2      	mvns	r2, r2
 8000440:	401a      	ands	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	60da      	str	r2, [r3, #12]
			break ;
 8000446:	e018      	b.n	800047a <MCAL_GPIOx_Init+0xca>
			CLR_BIT(GPIOx->GPIOx_PUPDR,( (Config->GPIO_PIN_NUMBER)<<1) );
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	683a      	ldr	r2, [r7, #0]
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f202 	lsl.w	r2, r1, r2
 8000458:	43d2      	mvns	r2, r2
 800045a:	401a      	ands	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	60da      	str	r2, [r3, #12]
			SET_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	3201      	adds	r2, #1
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	60da      	str	r2, [r3, #12]
	}
 8000478:	e1a9      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
 800047a:	e1a8      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
	else if(Config->GPIO_PIN_MODE == GPIO_OUT_OD || Config->GPIO_PIN_MODE == GPIO_OUT_PP )
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	2b05      	cmp	r3, #5
 8000482:	d004      	beq.n	800048e <MCAL_GPIOx_Init+0xde>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	785b      	ldrb	r3, [r3, #1]
 8000488:	2b04      	cmp	r3, #4
 800048a:	f040 80ac 	bne.w	80005e6 <MCAL_GPIOx_Init+0x236>
	{

		SET_BIT(GPIOx->GPIOx_MODER,( (Config->GPIO_PIN_NUMBER)<<1) );
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	601a      	str	r2, [r3, #0]
		CLR_BIT(GPIOx->GPIOx_MODER,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	3201      	adds	r2, #1
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]
		switch(Config->GPIO_PIN_MODE)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	785b      	ldrb	r3, [r3, #1]
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	d002      	beq.n	80004cc <MCAL_GPIOx_Init+0x11c>
 80004c6:	2b05      	cmp	r3, #5
 80004c8:	d00c      	beq.n	80004e4 <MCAL_GPIOx_Init+0x134>
 80004ca:	e016      	b.n	80004fa <MCAL_GPIOx_Init+0x14a>
		{
		case GPIO_OUT_PP :
			CLR_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	7812      	ldrb	r2, [r2, #0]
 80004d4:	4611      	mov	r1, r2
 80004d6:	2201      	movs	r2, #1
 80004d8:	408a      	lsls	r2, r1
 80004da:	43d2      	mvns	r2, r2
 80004dc:	401a      	ands	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	605a      	str	r2, [r3, #4]
			break ;
 80004e2:	e00a      	b.n	80004fa <MCAL_GPIOx_Init+0x14a>
		case GPIO_OUT_OD :
			SET_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	605a      	str	r2, [r3, #4]
			break ;
 80004f8:	bf00      	nop

		}
		switch(Config->GPIO_PIN_OUT_SPEED)
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	78db      	ldrb	r3, [r3, #3]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	f200 8164 	bhi.w	80007cc <MCAL_GPIOx_Init+0x41c>
 8000504:	a201      	add	r2, pc, #4	; (adr r2, 800050c <MCAL_GPIOx_Init+0x15c>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	0800051d 	.word	0x0800051d
 8000510:	08000551 	.word	0x08000551
 8000514:	08000583 	.word	0x08000583
 8000518:	080005b5 	.word	0x080005b5
		{

		case GPIO_OUT_SPEED_LOW :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	43d2      	mvns	r2, r2
 800052e:	401a      	ands	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	3201      	adds	r2, #1
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	43d2      	mvns	r2, r2
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	609a      	str	r2, [r3, #8]
			break;
 800054e:	e049      	b.n	80005e4 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_MEDIUM :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	3201      	adds	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	43d2      	mvns	r2, r2
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	609a      	str	r2, [r3, #8]
			break;
 8000580:	e030      	b.n	80005e4 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_HIGH :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	43d2      	mvns	r2, r2
 8000594:	401a      	ands	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	3201      	adds	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	431a      	orrs	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	609a      	str	r2, [r3, #8]
			break;
 80005b2:	e017      	b.n	80005e4 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_VERY_HIGH :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	3201      	adds	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	431a      	orrs	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	609a      	str	r2, [r3, #8]
			break;
 80005e2:	bf00      	nop

		}
	}
 80005e4:	e0f2      	b.n	80007cc <MCAL_GPIOx_Init+0x41c>
	else if(Config->GPIO_PIN_MODE == AFIO_OUT_OD || Config->GPIO_PIN_MODE == AFIO_OUT_PP || Config->GPIO_PIN_MODE == AFIO_INPUT )
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	d008      	beq.n	8000600 <MCAL_GPIOx_Init+0x250>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	d004      	beq.n	8000600 <MCAL_GPIOx_Init+0x250>
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	f040 80e7 	bne.w	80007ce <MCAL_GPIOx_Init+0x41e>
	{
		CLR_BIT(GPIOx->GPIOx_MODER,( (Config->GPIO_PIN_NUMBER)<<1) );
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	43d2      	mvns	r2, r2
 8000612:	401a      	ands	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOx->GPIOx_MODER,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	7812      	ldrb	r2, [r2, #0]
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	3201      	adds	r2, #1
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
		if(Config->GPIO_PIN_MODE == AFIO_INPUT)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	2b06      	cmp	r3, #6
 8000636:	d10c      	bne.n	8000652 <MCAL_GPIOx_Init+0x2a2>
		{
			GPIOx->GPIOx_PUPDR &= ~( 3<< ( (Config->GPIO_PIN_NUMBER)<<1 ) );
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	2103      	movs	r1, #3
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	43d2      	mvns	r2, r2
 800064a:	401a      	ands	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	e025      	b.n	800069e <MCAL_GPIOx_Init+0x2ee>
		}
		else if(Config->GPIO_PIN_MODE == AFIO_OUT_OD || Config->GPIO_PIN_MODE == AFIO_OUT_PP)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b08      	cmp	r3, #8
 8000658:	d003      	beq.n	8000662 <MCAL_GPIOx_Init+0x2b2>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d11d      	bne.n	800069e <MCAL_GPIOx_Init+0x2ee>
		{
			switch(Config->GPIO_PIN_MODE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	2b07      	cmp	r3, #7
 8000668:	d002      	beq.n	8000670 <MCAL_GPIOx_Init+0x2c0>
 800066a:	2b08      	cmp	r3, #8
 800066c:	d00c      	beq.n	8000688 <MCAL_GPIOx_Init+0x2d8>
 800066e:	e016      	b.n	800069e <MCAL_GPIOx_Init+0x2ee>
			{
			case AFIO_OUT_PP :
				CLR_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	43d2      	mvns	r2, r2
 8000680:	401a      	ands	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]
				break ;
 8000686:	e00a      	b.n	800069e <MCAL_GPIOx_Init+0x2ee>
			case AFIO_OUT_OD :
				SET_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	605a      	str	r2, [r3, #4]
				break ;
 800069c:	bf00      	nop
			}
		}

		if(Config->GPIO_PIN_NUMBER <=0 || Config->GPIO_PIN_NUMBER <8)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d003      	beq.n	80006ae <MCAL_GPIOx_Init+0x2fe>
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d80d      	bhi.n	80006ca <MCAL_GPIOx_Init+0x31a>
		{
			GPIOx->GPIOx_AFRL |= (Config->AFIO_SELECT<<(Config->GPIO_PIN_NUMBER<<2));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	7892      	ldrb	r2, [r2, #2]
 80006b6:	4611      	mov	r1, r2
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	621a      	str	r2, [r3, #32]
 80006c8:	e00c      	b.n	80006e4 <MCAL_GPIOx_Init+0x334>
		}
		else
		{
			GPIOx->GPIOx_AFRH |= (Config->AFIO_SELECT<<(Config->GPIO_PIN_NUMBER<<2));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	7892      	ldrb	r2, [r2, #2]
 80006d2:	4611      	mov	r1, r2
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		switch(Config->GPIO_PIN_OUT_SPEED)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	78db      	ldrb	r3, [r3, #3]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d870      	bhi.n	80007ce <MCAL_GPIOx_Init+0x41e>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <MCAL_GPIOx_Init+0x344>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000739 	.word	0x08000739
 80006fc:	0800076b 	.word	0x0800076b
 8000700:	0800079d 	.word	0x0800079d
		{

		case GPIO_OUT_SPEED_LOW :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	3201      	adds	r2, #1
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	401a      	ands	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	609a      	str	r2, [r3, #8]
			break;
 8000736:	e04a      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_MEDIUM :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	0052      	lsls	r2, r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	3201      	adds	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	43d2      	mvns	r2, r2
 8000762:	401a      	ands	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	609a      	str	r2, [r3, #8]
			break;
 8000768:	e031      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_HIGH :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	401a      	ands	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	3201      	adds	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	609a      	str	r2, [r3, #8]
			break;
 800079a:	e018      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_VERY_HIGH :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	0052      	lsls	r2, r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	431a      	orrs	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	3201      	adds	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	431a      	orrs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	609a      	str	r2, [r3, #8]
			break;
 80007ca:	e000      	b.n	80007ce <MCAL_GPIOx_Init+0x41e>
	}
 80007cc:	bf00      	nop

		}
	}

}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop

080007dc <MCAL_GPIOx_Pin_Toggle>:
{
	GPIOx->GPIOx_ODR = value ;
}

void MCAL_GPIOx_Pin_Toggle(GPIOx_Registers_t *GPIOx , uint8_t Pin_Number)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
	TOGGLE_BIT(GPIOx->GPIOx_ODR,Pin_Number);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	78fa      	ldrb	r2, [r7, #3]
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	405a      	eors	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	615a      	str	r2, [r3, #20]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <MCAL_NVIC_EnableIRQ>:
 * @param [out] 	: Function State [STATUS_SUCCESS , STATUS_ERROR]
 * Note			: The number of interrupts is product-dependent. Refer to reference manual/datasheet of
				  relevant STM32 product for related information
 **************************************************************************/
ReturnStatus MCAL_NVIC_EnableIRQ(IRQn_t  IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]

	uint8_t RegisterNumber = IRQn/32 ;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	095b      	lsrs	r3, r3, #5
 8000816:	73fb      	strb	r3, [r7, #15]
	uint8_t BitNumber = IRQn%32 ;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	73bb      	strb	r3, [r7, #14]
	NVIC->NVIC_ISER[RegisterNumber] |= (1<<BitNumber);
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <MCAL_NVIC_EnableIRQ+0x44>)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4618      	mov	r0, r3
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <MCAL_NVIC_EnableIRQ+0x44>)
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	4302      	orrs	r2, r0
 8000838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return STATUS_SUCCESS;
 800083c:	2300      	movs	r3, #0

}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <MCAL_RCC_voidInit>:
 * @param [out] 	: void
 * @retval 		: none
 * Note			: this function has no prerequisites
 *===================================================================*/
void MCAL_RCC_voidInit(RCC_Config_t *config)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint8_t	SYS_CLK_MODE ;
	SYS_CLK_MODE = config->RCC_SYS_CLK ;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	73fb      	strb	r3, [r7, #15]
	if(SYS_CLK_MODE==HSI)
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d119      	bne.n	8000898 <MCAL_RCC_voidInit+0x48>
	{
		SET_BIT(RCC->RCC_CR,HSION); // Enable HSI
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a52      	ldr	r2, [pc, #328]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,HSIRDY)==0); // Wait until HSI become stable
 8000870:	bf00      	nop
 8000872:	4b50      	ldr	r3, [pc, #320]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f9      	beq.n	8000872 <MCAL_RCC_voidInit+0x22>
		CLR_BIT(RCC->RCC_CFGR,SW0);//Select HSI
 800087e:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	4a4c      	ldr	r2, [pc, #304]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000884:	f023 0301 	bic.w	r3, r3, #1
 8000888:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->RCC_CFGR,SW1);
 800088a:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000890:	f023 0302 	bic.w	r3, r3, #2
 8000894:	6093      	str	r3, [r2, #8]
	else {
		//nothing
	}


}
 8000896:	e087      	b.n	80009a8 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==HSE)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d12f      	bne.n	80008fe <MCAL_RCC_voidInit+0xae>
		HSE_Mode = config->RCC_HSE_MODE ;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	73bb      	strb	r3, [r7, #14]
		if(HSE_Mode==HSE_MODE_RC)
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <MCAL_RCC_voidInit+0x68>
			CLR_BIT(RCC->RCC_CR,HSEBYP); // select RC mode
 80008aa:	4b42      	ldr	r3, [pc, #264]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e008      	b.n	80008ca <MCAL_RCC_voidInit+0x7a>
		else if(HSE_Mode==HSE_MODE_BYPASS)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d105      	bne.n	80008ca <MCAL_RCC_voidInit+0x7a>
			SET_BIT(RCC->RCC_CR,HSEBYP); // select bypath mode
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a3c      	ldr	r2, [pc, #240]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c8:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,HSEON); // ENABLE HSE
 80008ca:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,HSERDY)==0);//Wait until the HSE become Stable
 80008d6:	bf00      	nop
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f9      	beq.n	80008d8 <MCAL_RCC_voidInit+0x88>
		SET_BIT(RCC->RCC_CFGR,SW0);//Select HSE oscillator
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->RCC_CFGR,SW1);
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 80008f6:	f023 0302 	bic.w	r3, r3, #2
 80008fa:	6093      	str	r3, [r2, #8]
}
 80008fc:	e054      	b.n	80009a8 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==PLL)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d130      	bne.n	8000966 <MCAL_RCC_voidInit+0x116>
		RCC->RCC_PLLCFGR |= config->RCC_PLL_IN_DIV_FACTOR ;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7912      	ldrb	r2, [r2, #4]
 800090c:	4611      	mov	r1, r2
 800090e:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000910:	430b      	orrs	r3, r1
 8000912:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_MUL_FACTOR_VCO)<<6 ;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	88d2      	ldrh	r2, [r2, #6]
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	4611      	mov	r1, r2
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000922:	430b      	orrs	r3, r1
 8000924:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_OUT_DIV_FACTOR)<<16;
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7952      	ldrb	r2, [r2, #5]
 800092e:	0412      	lsls	r2, r2, #16
 8000930:	4611      	mov	r1, r2
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000934:	430b      	orrs	r3, r1
 8000936:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_SRC)<<22;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	7a12      	ldrb	r2, [r2, #8]
 8000940:	0592      	lsls	r2, r2, #22
 8000942:	4611      	mov	r1, r2
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CR,PLLON);
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000954:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,PLLRDY)==0);//Wait until Main PLL become Stable
 8000956:	bf00      	nop
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <MCAL_RCC_voidInit+0x108>
}
 8000964:	e020      	b.n	80009a8 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==PLLI2S)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d11d      	bne.n	80009a8 <MCAL_RCC_voidInit+0x158>
		RCC->RCC_PLLCFGR |= config->RCC_PLL_IN_DIV_FACTOR ;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7912      	ldrb	r2, [r2, #4]
 8000974:	4611      	mov	r1, r2
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000978:	430b      	orrs	r3, r1
 800097a:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_SRC)<<22;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	7a12      	ldrb	r2, [r2, #8]
 8000984:	0592      	lsls	r2, r2, #22
 8000986:	4611      	mov	r1, r2
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CR,PLLI2SON);
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 8000994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000998:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,PLLI2SRDY)==0);//Wait until I2S PLL become Stable
 800099a:	bf00      	nop
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MCAL_RCC_voidInit+0x164>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <MCAL_RCC_voidInit+0x14c>
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40023800 	.word	0x40023800

080009b8 <MCAL_RCC_voidPeripheral_EN>:
 * @param [out] 	: void
 * @retval 		: none
 * Note			: the RCC peripheral must be initialized firist
 *===================================================================*/
void MCAL_RCC_voidPeripheral_EN(uint8_t Peripheral , uint8_t Bus)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]
	switch(Bus)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d836      	bhi.n	8000a3c <MCAL_RCC_voidPeripheral_EN+0x84>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <MCAL_RCC_voidPeripheral_EN+0x1c>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	080009fb 	.word	0x080009fb
 80009dc:	08000a11 	.word	0x08000a11
 80009e0:	08000a27 	.word	0x08000a27
	{

	case AHB1_BUS : SET_BIT(RCC->RCC_AHB1ENR, Peripheral);
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	2101      	movs	r1, #1
 80009ec:	fa01 f202 	lsl.w	r2, r1, r2
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
	break ;
 80009f8:	e020      	b.n	8000a3c <MCAL_RCC_voidPeripheral_EN+0x84>
	case AHB2_BUS : SET_BIT(RCC->RCC_AHB2ENR, Peripheral);
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	6353      	str	r3, [r2, #52]	; 0x34
	break ;
 8000a0e:	e015      	b.n	8000a3c <MCAL_RCC_voidPeripheral_EN+0x84>
	case APB1_BUS : SET_BIT(RCC->RCC_APB1ENR, Peripheral);
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	2101      	movs	r1, #1
 8000a18:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000a20:	430b      	orrs	r3, r1
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
	break ;
 8000a24:	e00a      	b.n	8000a3c <MCAL_RCC_voidPeripheral_EN+0x84>
	case APB2_BUS : SET_BIT(RCC->RCC_APB2ENR, Peripheral);
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
	break ;
 8000a3a:	bf00      	nop
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40023800 	.word	0x40023800

08000a4c <SPI1_IRQHandler>:
}



void SPI1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE=	((SPI1->SPI_SR >> 1) & 0x1);
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <SPI1_IRQHandler+0x40>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	793b      	ldrb	r3, [r7, #4]
 8000a60:	f362 0300 	bfi	r3, r2, #0, #1
 8000a64:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE=	((SPI1->SPI_SR >> 0) & 0x1);
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <SPI1_IRQHandler+0x40>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	793b      	ldrb	r3, [r7, #4]
 8000a72:	f362 0341 	bfi	r3, r2, #1, #1
 8000a76:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config->CALLBACK(IRQ_SRC);
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SPI1_IRQHandler+0x44>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	7938      	ldrb	r0, [r7, #4]
 8000a80:	4798      	blx	r3
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40013000 	.word	0x40013000
 8000a90:	2000005c 	.word	0x2000005c

08000a94 <SysTick_Handler>:
		SET_BIT(STK->STK_CTRL, ENABLE);
}

/***********************IRQ Handler***********************/
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	if(GlobalcallBackPtr != NULL)
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Handler+0x18>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <SysTick_Handler+0x12>
	{
		GlobalcallBackPtr();
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <SysTick_Handler+0x18>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4798      	blx	r3
	}

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000058 	.word	0x20000058

08000ab0 <MyISR>:
#include"MCAL/GPIO/GPIO_Interface.h"
#include "MCAL/EXTI/EXTI_Interface.h"
#include "MCAL/NVIC/NVIC_Interface.h"

void MyISR(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	MCAL_GPIOx_Pin_Toggle(GPIOA, GPIO_PIN_0);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <MyISR+0x10>)
 8000ab8:	f7ff fe90 	bl	80007dc <MCAL_GPIOx_Pin_Toggle>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <main>:
int main()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
	RCC_Config_t MyRCC ;
	MyRCC.RCC_SYS_CLK 	 =  HSI;
 8000aca:	2300      	movs	r3, #0
 8000acc:	733b      	strb	r3, [r7, #12]
	MyRCC.RCC_PERIPHERAL = GPIOA_PERIPHERAL ;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73bb      	strb	r3, [r7, #14]
	//MyRCC.RCC_HSE_MODE = HSE_MODE_BYPASS ;
	MyRCC.RCC_BUS_SELECT = AHB1_BUS  ;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
	MCAL_RCC_voidInit(&MyRCC);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff feb8 	bl	8000850 <MCAL_RCC_voidInit>
	MCAL_RCC_voidPeripheral_EN(MyRCC.RCC_PERIPHERAL,MyRCC.RCC_BUS_SELECT );
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff66 	bl	80009b8 <MCAL_RCC_voidPeripheral_EN>
	MyRCC.RCC_PERIPHERAL = GPIOB_PERIPHERAL ;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73bb      	strb	r3, [r7, #14]
	MCAL_RCC_voidPeripheral_EN(MyRCC.RCC_PERIPHERAL,MyRCC.RCC_BUS_SELECT);
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	7bfa      	ldrb	r2, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff5e 	bl	80009b8 <MCAL_RCC_voidPeripheral_EN>
	MyRCC.RCC_BUS_SELECT = APB2_BUS  ;
 8000afc:	2303      	movs	r3, #3
 8000afe:	73fb      	strb	r3, [r7, #15]
	MyRCC.RCC_PERIPHERAL = SYSCFG_PERIPHERAL ;
 8000b00:	230e      	movs	r3, #14
 8000b02:	73bb      	strb	r3, [r7, #14]
	MCAL_RCC_voidPeripheral_EN(MyRCC.RCC_PERIPHERAL,MyRCC.RCC_BUS_SELECT);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	7bfa      	ldrb	r2, [r7, #15]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff54 	bl	80009b8 <MCAL_RCC_voidPeripheral_EN>

	GPIOx_Config_t MyGPIO	;

	/******************Output***************/
	MyGPIO.GPIO_PIN_MODE = GPIO_OUT_PP;
 8000b10:	2304      	movs	r3, #4
 8000b12:	727b      	strb	r3, [r7, #9]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	723b      	strb	r3, [r7, #8]
	MyGPIO.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_LOW ;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIOx_Init(GPIOA ,&MyGPIO);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <main+0x9c>)
 8000b24:	f7ff fc44 	bl	80003b0 <MCAL_GPIOx_Init>


	/*****************Input*****************/
	MyGPIO.GPIO_PIN_MODE = GPIO_INPUT_FLOAT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	727b      	strb	r3, [r7, #9]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	723b      	strb	r3, [r7, #8]
	MCAL_GPIOx_Init(GPIOB ,&MyGPIO);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <main+0xa0>)
 8000b38:	f7ff fc3a 	bl	80003b0 <MCAL_GPIOx_Init>
	/****************************************/
	EXTI_Config_t MyEXTI ;
	MyEXTI.EXTI_StateSelection = EXTI_ENABLE ;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	MyEXTI.EXTI_PortSelection = EXTI_PORTB ;
 8000b40:	2301      	movs	r3, #1
 8000b42:	707b      	strb	r3, [r7, #1]
	MyEXTI.EXTI_LineSelection = EXTI_LINE_0 ;
 8000b44:	2300      	movs	r3, #0
 8000b46:	703b      	strb	r3, [r7, #0]
	MyEXTI.EXTI_EdgeSelection = EXTI_ON_CHANGE ;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	70bb      	strb	r3, [r7, #2]
	MyEXTI.CallBack = MyISR ;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <main+0xa4>)
 8000b4e:	607b      	str	r3, [r7, #4]
	MCAL_EXTI_Enable(&MyEXTI);
 8000b50:	463b      	mov	r3, r7
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb3e 	bl	80001d4 <MCAL_EXTI_Enable>
	/*****************************************/
	MCAL_NVIC_EnableIRQ(EXTI0);
 8000b58:	2006      	movs	r0, #6
 8000b5a:	f7ff fe55 	bl	8000808 <MCAL_NVIC_EnableIRQ>
	/*****************************************/



	while (1)
 8000b5e:	e7fe      	b.n	8000b5e <main+0x9a>
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	08000ab1 	.word	0x08000ab1

08000b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b9a:	f000 f811 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff ff91 	bl	8000ac4 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bb0:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000bb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bb8:	20000060 	.word	0x20000060

08000bbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4e0d      	ldr	r6, [pc, #52]	; (8000bf8 <__libc_init_array+0x38>)
 8000bc4:	4c0d      	ldr	r4, [pc, #52]	; (8000bfc <__libc_init_array+0x3c>)
 8000bc6:	1ba4      	subs	r4, r4, r6
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	2500      	movs	r5, #0
 8000bcc:	42a5      	cmp	r5, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	4e0b      	ldr	r6, [pc, #44]	; (8000c00 <__libc_init_array+0x40>)
 8000bd2:	4c0c      	ldr	r4, [pc, #48]	; (8000c04 <__libc_init_array+0x44>)
 8000bd4:	f000 f818 	bl	8000c08 <_init>
 8000bd8:	1ba4      	subs	r4, r4, r6
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	2500      	movs	r5, #0
 8000bde:	42a5      	cmp	r5, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be8:	4798      	blx	r3
 8000bea:	3501      	adds	r5, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf2:	4798      	blx	r3
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	08000c20 	.word	0x08000c20
 8000bfc:	08000c20 	.word	0x08000c20
 8000c00:	08000c20 	.word	0x08000c20
 8000c04:	08000c24 	.word	0x08000c24

08000c08 <_init>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	bf00      	nop
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr

08000c14 <_fini>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr
